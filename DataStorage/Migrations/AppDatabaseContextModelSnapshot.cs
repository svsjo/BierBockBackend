// <auto-generated />
using System;
using DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStorage.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    partial class AppDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("BierBockBackend.Data.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PossiblePoints")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("BierBockBackend.Data.ChallengePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BeerCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChallengeParts");
                });

            modelBuilder.Entity("BierBockBackend.Data.DrinkAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<string>("BeerCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkActions");
                });

            modelBuilder.Entity("BierBockBackend.Data.FavouriteBeer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("AlcoholByVolume")
                        .HasColumnType("TEXT");

                    b.Property<string>("BeerStyle")
                        .HasColumnType("TEXT");

                    b.Property<string>("BeerType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Brands")
                        .HasColumnType("TEXT");

                    b.Property<string>("BrewingMethod")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CarbohydratesPer100g")
                        .HasColumnType("TEXT");

                    b.Property<string>("CarbonationLevel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Categories")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EnergyKcalPer100g")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FatPer100g")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fermentation")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("FiberPer100g")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hops")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IBU")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientsText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Malt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NutriscoreGrade")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProteinsPer100g")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SaltPer100g")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SaturatedFatPer100g")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SodiumPer100g")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SugarsPer100g")
                        .HasColumnType("TEXT");

                    b.Property<string>("Taste")
                        .HasColumnType("TEXT");

                    b.Property<string>("Yeast")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BierBockBackend.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FavouriteBeerCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengePartChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengePartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ChallengePartId");

                    b.ToTable("ChallengePartChallenge");
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("BierBockBackend.Data.DrinkAction", b =>
                {
                    b.HasOne("BierBockBackend.Data.User", "User")
                        .WithMany("AllDrinkingActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengePartChallenge", b =>
                {
                    b.HasOne("BierBockBackend.Data.ChallengePart", "ChallengePart")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BierBockBackend.Data.Challenge", "Challenge")
                        .WithMany("PartialChallenges")
                        .HasForeignKey("ChallengePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("ChallengePart");
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengeUser", b =>
                {
                    b.HasOne("BierBockBackend.Data.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BierBockBackend.Data.Challenge", "Challenge")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BierBockBackend.Data.Challenge", b =>
                {
                    b.Navigation("PartialChallenges");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BierBockBackend.Data.ChallengePart", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("BierBockBackend.Data.User", b =>
                {
                    b.Navigation("AllDrinkingActions");

                    b.Navigation("UserChallenges");
                });
#pragma warning restore 612, 618
        }
    }
}
