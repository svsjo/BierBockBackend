// <auto-generated />
using System;
using DataStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataStorage.Migrations
{
    [DbContext(typeof(AppDatabaseContext))]
    [Migration("20230329183936_AddNM")]
    partial class AddNM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("BierBockBackend.Data.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PossiblePoints")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("BierBockBackend.Data.ChallengePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChallengePart");
                });

            modelBuilder.Entity("BierBockBackend.Data.DrinkAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<string>("BeerCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DrinkAction");
                });

            modelBuilder.Entity("BierBockBackend.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChallengeChallengePart", b =>
                {
                    b.Property<int>("ChallengesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartialChallengesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChallengesId", "PartialChallengesId");

                    b.HasIndex("PartialChallengesId");

                    b.ToTable("ChallengeChallengePart");
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("ChallengeUser");
                });

            modelBuilder.Entity("BierBockBackend.Data.DrinkAction", b =>
                {
                    b.HasOne("BierBockBackend.Data.User", null)
                        .WithMany("AllTrinkingActions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ChallengeChallengePart", b =>
                {
                    b.HasOne("BierBockBackend.Data.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BierBockBackend.Data.ChallengePart", null)
                        .WithMany()
                        .HasForeignKey("PartialChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataStorage.HelpRelations.ChallengeUser", b =>
                {
                    b.HasOne("BierBockBackend.Data.User", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BierBockBackend.Data.Challenge", "Challenge")
                        .WithMany("User")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BierBockBackend.Data.Challenge", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("BierBockBackend.Data.User", b =>
                {
                    b.Navigation("AllTrinkingActions");

                    b.Navigation("UserChallenges");
                });
#pragma warning restore 612, 618
        }
    }
}
